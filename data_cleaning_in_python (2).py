# -*- coding: utf-8 -*-
"""Data Cleaning in Python.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1WiNuVbickDY3a7USzq3WWhN0QutuH815
"""

from google.colab import drive
drive.mount('/content/drive')

import pandas as pd

file_path = '/content/drive/MyDrive/Data Cleaning/Sample Data/sample_data.csv'
df = pd.read_csv(file_path)

df.head()

print(df.to_string())

import pandas as pd

file_path3 = '/content/drive/MyDrive/Data Cleaning/Sample Data/data.csv'
df3 =pd.read_csv(file_path3)

df3.head()

"""There is also a tail() method for viewing the last rows of the DataFrame.

The tail() method returns the headers and a specified number of rows, starting from the bottom.
"""

df3.tail()

df3.info()



"""#**Data Cleaning**

Data cleaning means fixing bad data in your data set.

Bad data could be:

* Empty cells
* Data in wrong format
* Wrong data
* Duplicates

#Empty Cells
Empty cells can potentially give you a wrong result when you analyze data.    
**1.Remove Rows**  
One way to deal with empty cells is to remove rows that contain empty cells.

This is usually OK, since data sets can be very big, and removing a few rows will not have a big impact on the result.
"""

import pandas as pd
new_df = df.dropna()
new_df.head(12)

"""**Note**: By default, the *dropna()* method returns a new DataFrame, and will not change the original.  
If you want to change the original DataFrame, use the inplace = True argument:



"""

import pandas as pd

df3.dropna(inplace = True)

"""**Note:** Now, the dropna(inplace = True) will NOT return a new DataFrame, but it will remove all rows containing NULL values from the original DataFrame.

**2.Replace Empty Values**  
Another way of dealing with empty cells is to insert a new value instead.

This way you do not have to delete entire rows just because of some empty cells.

The fillna() method allows us to replace empty cells with a value:
"""

import pandas as pd
df3.fillna(130, inplace = True)

"""*Replace Only For Specified Columns*  
The example above replaces all empty cells in the whole Data Frame.  

To only replace empty values for one column, **specify the column name** for the DataFrame:
"""

# Example
# Replace NULL values in the "Calories" columns with the number 130:
df3["Calories"].fillna(130, inplace = True)

"""**Replace Using Mean, Median, or Mode**   
A common way to replace empty cells, is to calculate the mean, median or mode value of the column.   

Pandas uses the mean() median() and mode() methods to calculate the respective values for a specified column:
"""

x = df3['Calories'].mean()

x

print(x)

df.fillna({'Calories': x}, inplace=True)

y = df3['Calories'].median()

df3.fillna({'Calories': y}, inplace = True)

z = df3['Calories'].mode()

df3.fillna({"Calories":z}, inplace = True)

"""**Data of Wrong Format**  
Cells with data of wrong format can make it difficult, or even impossible, to analyze data.

To fix it, you have two options: remove the rows, or convert all cells in the columns into the same format.
"""

# Let's try to convert all cells in the 'Date' column into dates.
# Pandas has a to_datetime() method for this:
import pandas as pd

df3['Date'] = pd.to_datetime(df3['Date'], format='mixed')
df3

df.dropna(subset=['Date'], inplace = True)

